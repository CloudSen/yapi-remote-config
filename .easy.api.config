# 通过@ignore来忽略类和方法
ignore=#ignore

# 通过@module手动指定接口所属项目
module=#module

# 通过@folder手动指定接口所属文件夹
folder.name=#folder

# javadoc方式，设置mock参数
# 例如 @mock @natural(0,9)
field.mock=#mock

# javadoc方式，设置demo
# 例如 @demo 1
field.demo=#demo

# 给API打tag
api.tag[#dev]=开发中
api.tag[@java.lang.Deprecated]=已废弃
api.tag[#selfTest]=自测中
api.tag[#test]=联调中

# 给api标记完成状态
api.status[#undone]=undone
api.status[#todo]=undone


# javadoc方式，指定方法返回参数
# 例如
#/**
# * @real_return {@link Result<UserInfo>}
# */
method.return[#real_return]=groovy:helper.resolveLink(it.doc("real_return"))

# javadoc方式，指定默认值
# 例如
#/**
# * 价格
# * @default 666
# */
# @NotNull
# private Float price;
field.default.value=#default

# 导出方法RPC文档
mdoc.class.filter=groovy:it.name().endsWith("FeignClient")

# 使用枚举类型的code给前端
enum.use.by.type=false
enum.use.custom[groovy:it.isExtend("cn.cisdigital.datakits.framework.model.interfaces.BaseEnum")]=name

# 此配置仅设置返回值的核心主体, 使得@return的注释落在主体属性上,不影响返回类型及字段.
method.return.main[groovy:it.returnType().isExtend("cn.cisdigital.datakits.framework.model.vo.ResVo")]=data

# 类型转换器，后端的Long要作为String来展示
json.rule.convert[java.lang.Long]=java.lang.String

# 统一返回对象数据模拟
mock.[message|string]=操作提示
mock.[code|string]=@pick(["0","0","0","0","0","0","500"])
mock.[data.total|string]=@natural(500)
mock.[data.current|string]=@natural(1,50)
mock.[data.size|string]=@natural(10)
